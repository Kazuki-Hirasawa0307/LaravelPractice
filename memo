各ディレクトリの役割

app
アプリケーションのコアとなるコードを含むディレクトリです。
アプリケーション内のクラスのほとんどはこの中に設置される感じ
app ディレクトリ以下のnamespaceは App 、デフォルトで用意されているフォルダは Console Exceptions Http Providers です。
 Console
自分で Artisan commandsをつくれるところ。
php artisan make:commands test
とすれば、コマンド用ファイルが作られる。
handle() に処理をかけばいい感じ。
 Exceptions
例外処理を置いておくところ。
「どうやってログを吐くか、レンダリングをするか」といったことをカスタマイズしたいのであればこのクラスの Handler クラスをいじればいいとのこと。
 Http
コントローラ、ミドルウェア、フォームリクエストなどをおくところ。
アプリケーションへのリクエスト処理に関するほとんどのロジックがこのディレクトリに含まれる。
 Providers
アプリケーションの中の全てのサービスプロバイダがここにくる。
サービスコンテナ、登録したイベント、リクエストに対するタスクをbindingして実行してくれる、的な？（よくわからない）

bootstrap
フレームワークの初期化を行い、autoloadingを設定するファイルをおく。
また、フレームワークが作り出すキャッシュファイルを貯めたりもする。

config
名前の通り、アプリケーションの設定ファイルをおくディレクトリ。
「ここを読んでおくと"オプションで何が使えるのか"がよくわかると思うよ！」だそう。

database
データベースのマイグレーションやシードをおくディレクトリ。
SQLiteを使いたい時にも利用できる

public
アプリケーションに送られる、全てのリクエストのエントリーポイント（最初に実行される）となるindex.php ファイルがあるところ。
ここには他に画像、JS、CSSといったものを置いたりする。

resources
コンパイル前のLESS、SASS、JS、viewといったものを置くところ。
また、言語ファイルを置いたりもする。

routes
アプリケーションの全てのルートを定義するディレクトリ。
デフォルトでは web.php api.php console.php channels.php といったルートファイルを用意してある。

web.php ・ api.php
web.php はセッション、CSRF対策、cookieの暗号化といった機能を提供する web ミドルウェアを経由する。
stateless,RESTful APIといったアプリケーションを作るならこのファイルだけでルートを定義できる感じ。
一方 api.php は api ミドルウェアを経由し、ステートレス（状態を保持しないシステムやプログラムのことらしい）なルートである。
なのでトークンを経由する認証や、セッションにアクセスする必要のないものがここを通る

console.php
普通のRouteっぽく、インラインでコマンドが作れるファイル。

channels.php
ブロードキャストするイベントを登録するファイル。

storage
Bladeテンプレートをコンパイルしたものやセッションのファイル、キャッシュファイル、その他フレームワークが作り出したファイルなんかが置かれる。
ディレクトリは app framework logs の３つに分かれている。

tests
PHPUnit みたいな自動テストを置くためのディレクトリ。
全てのクラスには Test を接尾辞をつけないといけない。
テストを走らせるには phpunitコマンドか php vendor/bin/phpunitかを使う。

vendor
Composer の依存内容をおくところ。


初期プロジェクト解説
https://www.hypertextcandy.com/explaining-laravel-project-directories-and-files


※ php artisan list でコマンド一覧がみれる

DB マイグレーションとは、テーブル定義を管理する仕組みのことです。
    Laravel におけるマイグレーションは以下のように実現されます。
    一意な名前のマイグレーションファイル（テーブル定義に対する変更内容）を作成する。マイグレーションファイルは up と down という2つのメソッドを持つ PHP クラスとして記述される。
    「どのような SQL をどの順番で実行したか」は migrations テーブルで管理される。migrations テーブルには実行済みのマイグレーションファイル名が格納されている。
    マイグレーションコマンドを実行すると、まず migrations テーブルの検索結果とマイグレーションファイルが入っているディレクトリを比べて、実行されていないファイルが検索される。
    実行されていないファイルがあった場合は、順番に up メソッドが実行される。
    ではここから実演形式で見ていきたいと思います。


コントローラークラス作成コマンド（サンプル）
　php artisan make:controller TaskController
「php artisan make:controller ※コントローラー名※」

マイグレーションファイル作成（サンプル）
　php artisan make:migration create_folders_table --create=folders
　→2021_03_16_010551_create_folders_table　というファイルが作成される
「php artisan make:migration *テーブル名*_table (--create=folders)」
　→（）内はオプション。--create、--tableのうしろに=でマイグレーションファイルで扱うテーブルの名前を引数として渡すと、出来上がるマイグレーションファイルはそのテーブル名を含んで雛形が作られます。
　→*年_月_日_時分秒_テーブル名*のファイルが作成される。（/database/migrations）

Laravel のマイグレーションファイルは Migration クラスを継承したクラスとして表現され、up と down のふたつのメソッドを持ちます。
マイグレーション実行時は up メソッドが実行されます


php artisan migrate
artisan コマンドでマイグレーションを実行しましょう。ここで初めてデータベースに対して DDL が発行されます。
migrations テーブルに問い合わせを行なって、database/migrations ディレクトリの中には未実行のファイルはないと分かると何もしないのです。

php artisan migrate:rollback
ロールバックはマイグレーションの内容を逆に元に戻す機能です。
とは言っても自動的に元に戻す処理が実行される訳ではありません。
より正確にいうと、ロールバックは直近のマイグレーションファイルの down メソッドを実行するコマンドです。


モデルクラスは PHP 側でデータの入れ物になるクラスです。基本的にはモデルクラスひとつがテーブルひとつに対応するように作ります。
モデルの作成（サンプル）
　モデルを継承したクラスが作成される
「モデルというのは、プロダクトの中心にあるものですので、こいつをもとにしていろんな処理を作っていくことになると思っています。モデルを作ったら、そいつを取得するためのコントローラやデータベースの作成、テスト用のファクトリーとかを作っていくことになるわけですが、そういうのはモデルと一緒に作ってしまえばいいのではと考えるわけです。」
　php artisan make:model Todo --migration
「php artisan make:model *クラス名* --migration」

データの挿入
ここまででデータを扱う準備ができたのですが、テストデータが入っていた方がコントローラーを書きやすいので、データを挿入します。データベースクライアントから直接 SQL を実行してデータを挿入してもよいですが、シーダー（Seeder）を用いた方法を紹介しておきます。
php artisan make:seeder FoldersTableSeeder

composer dump-autoload
composer コマンドは、作成したシーダークラスをアプリケーションに認識させるためのものだと思ってください。
php artisan db:seed --class=FoldersTableS   eeder
db:seed コマンドで「Database seeding completed successfully.」と返ってきたら成功です。データベースクライアントでテーブルの中身を確認してみましょう。

テンプレートとはアプリケーションがレスポンスする HTML の雛形で、制御構文（if や foreach など）や変数の展開を記述することができます。ページの枠組みだけ用意して、URL によって変わる箇所だけが穴埋めになっているイメージです。雛形が同じでもデータを変えることで別のページを作り出せる仕組みですね。
テンプレートエンジンとはテンプレートを HTML に変換するライブラリです。テンプレートエンジンが変わればテンプレートの書き方も変わってきます。Laravel のテンプレートエンジンは Blade という名前です。
.blade.php という拡張子はテンプレートファイルとして認識されるために決まっています。

https://www.hypertextcandy.com/laravel-tutorial-todo-app-list-tasks/

ここでテストデータの確認のために、Laravel の便利なコマンド tinker を使います。まずは以下のコマンドを実行してください。

$ php artisan tinker
tinker を使うと、コマンドラインからアプリケーションの機能を確かめることができます。Web アプリなので本来であれば画面を通してしか確認できない機能をコマンドラインで確かめられるのが便利なポイントです。

さて上記のコマンドを実行すると、以下の出力が返ってきます。>>> はユーザーからの入力を待ち受けているという意味です。
